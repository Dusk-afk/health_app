"""Add family members table and make phone_number nullable

Revision ID: 421340ccc50c
Revises: 97dbdc3dff0a
Create Date: 2025-04-18 04:51:05.460396

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '421340ccc50c'
down_revision = '97dbdc3dff0a'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('family_members', schema=None) as batch_op:
        batch_op.add_column(sa.Column('user_id', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('member_id', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('relationship', sa.String(length=50), nullable=False))
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               nullable=False,
               autoincrement=True)
        # Explicitly named unique constraint (already correct)
        batch_op.create_unique_constraint('uq_family_members_user_id_member_id', ['user_id', 'member_id']) 
        # Explicitly named foreign keys
        batch_op.create_foreign_key('fk_family_members_user_id_users', 'users', ['user_id'], ['id'])
        batch_op.create_foreign_key('fk_family_members_member_id_users', 'users', ['member_id'], ['id'])
        # Removed potentially problematic drop_column calls for SQLite compatibility
        # batch_op.drop_column('relation') 
        # batch_op.drop_column('gender')
        # batch_op.drop_column('name')
        # batch_op.drop_column('date_of_birth')

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('phone_number',
               existing_type=sa.VARCHAR(length=20),
               nullable=True)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('phone_number',
               existing_type=sa.VARCHAR(length=20),
               nullable=False)

    with op.batch_alter_table('family_members', schema=None) as batch_op:
        # Removed corresponding add_column calls from downgrade
        # batch_op.add_column(sa.Column('date_of_birth', sa.DATE(), nullable=True))
        # batch_op.add_column(sa.Column('name', sa.VARCHAR(length=100), nullable=False))
        # batch_op.add_column(sa.Column('gender', sa.VARCHAR(length=20), nullable=True))
        # batch_op.add_column(sa.Column('relation', sa.VARCHAR(length=50), nullable=False))
        # Explicitly named constraints to drop
        batch_op.drop_constraint('fk_family_members_member_id_users', type_='foreignkey')
        batch_op.drop_constraint('fk_family_members_user_id_users', type_='foreignkey')
        batch_op.drop_constraint('uq_family_members_user_id_member_id', type_='unique')
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               nullable=True,
               autoincrement=True)
        batch_op.drop_column('relationship')
        batch_op.drop_column('member_id')
        batch_op.drop_column('user_id')

    # ### end Alembic commands ###
